<?php
/**
 * @file
 * A dataset module creates various forms and saves the data in database as
 * well in flat csv files
 */


//TODO: Review what forms needs to be included
require_once 'includes/tripal_chado_datasets_submission.form.inc';
require_once 'includes/tripal_chado_datasets.admin.inc';
require_once 'includes/tripal_chado_datasets_mail.inc';


define('FROM_ADDRESS', '"NAL-i5k"<i5k@ars.usda.gov>');

/**
 * Implementation of hook_init().
 */
function datasets_init() {
  if (arg(0) === 'node' && strpos(arg(1), '.')) {
    drupal_not_found();
  }
}

/**
 * Implementation of hook_menu().
 */
function datasets_menu() {
  $items = [];


  //Form to request a chado ANALYSIS
  $items['datasets/submit-a-dataset'] = [
    'title' => 'Add Mapped dataset, Genome assembly, Gene Prediction Information',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['submit_datasets'],
    'access callback' => 'dataset_access_callback',
    'access arguments' => ['access datasets'],
    'type' => MENU_CALLBACK,
    'weight' => 100,
    'file' => 'includes/tripal_chado_datasets_submission.form.inc',
    'file_path' => drupal_get_path('module', 'datasets'),
  ];

  $items['datasets/%/view'] = [
    'title' => 'View dataset information',
    'page callback' => 'datasets_information_view',
    'page arguments' => [1],
    'access arguments' => ['administer datasets'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_chado_datasets.admin.inc',
  ];

  $items['datasets_og/%/delete'] = [
    'title' => 'Delete dataset information',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['datasets_og_delete_form', 1],
    'access arguments' => ['administer datasets'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_chado_datasets.admin.inc',
  ];

  $items['datasets/organism/%/edit'] = [
    'title' => 'Approve or Reject the requested organism',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['datasets_organism_approval', 2],
    'access arguments' => ['administer datasets'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_chado_datasets.admin.inc',
  ];

  $items['datasets/dataimport'] = [
    'title' => 'Import dataset information',
    'page callback' => 'datasets_information_import',
    'page arguments' => [1],
    'access arguments' => ['administer datasets'],
    'type' => MENU_CALLBACK,
    'file' => 'includes/tripal_chado_datasets.admin.inc',
  ];

  //Form to request creating a chado organism.
  $items['datasets/request-project'] = [
    'title' => 'Genome project initial inquiry form',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['request_project'],
    'access callback' => 'dataset_access_callback',
    'access arguments' => ['access datasets'],
    'type' => MENU_CALLBACK,
    'weight' => 100,
    'file' => 'includes/tripal_chado_datasets_request_project.form.inc',
    'file_path' => drupal_get_path('module', 'datasets'),
  ];


  $items['register/project-dataset/account'] = [
    'title' => 'Register for a Project or Dataset Submission Account',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['project_dataset_submission_account'],
    'access arguments' => ['access register form'],
    'type' => MENU_CALLBACK,
    'weight' => 100,
    'file' => 'includes/tripal_chado_datasets_project_dataset_submission_account.form.inc',
    'file_path' => drupal_get_path('module', 'datasets'),
  ];


  /**
   * Admin items
   */
  $items['admin/structure/datasets'] = [
    'title' => 'Datasets',
    'description' => t('List of Organism\'s for approve/reject'),
    'page callback' => 'dataset_cordinator_organisms',
    'access arguments' => ['administer datasets'],
    'file' => 'includes/tripal_chado_datasets.admin.inc',
    'file_path' => drupal_get_path('module', 'datasets'),
  ];


  $items['admin/structure/datasets/list'] = [
    'title' => 'Request Project List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  ];

  $items['admin/structure/datasets/report'] = [
    'title' => 'Datasets Report',
    'page callback' => 'drupal_get_form',
    'page arguments' => ['dataset_report'],
    'access arguments' => ['administer datasets'],
    'type' => MENU_LOCAL_TASK,
    'file' => 'includes/tripal_chado_datasets.admin.inc',
  ];

  return $items;
}

/**
 * Implements hook_permission().
 */
function datasets_permission() {
  return [
    'administer datasets' => [
      'title' => t('Administer datasets'),
    ],
    'access datasets' => [
      'title' => t('Access datasets'),
    ],
    'access register form' => [
      'title' => t('access register form'),
    ],
  ];
}

/**
 *  function dataset_access_callback
 */
function dataset_access_callback() {
  global $user;
  if (arg(0) == 'datasets' && $user->uid == 0) {
    drupal_goto('/user/login', ['query' => drupal_get_destination()]);
  }
  return TRUE;
}

/**
 * Default implementation of hook_captcha().
 */
function datasets_captcha($op, $captcha_type = '') {
  $result = captcha_captcha($op, $captcha_type);
  if (($op == 'generate') && ($captcha_type == 'Math')) {
    $result = [];
    $answer = mt_rand(1, 20);
    $x = mt_rand(1, $answer);
    $y = $answer - $x;
    $result['solution'] = "$answer";

    // Build challenge widget.
    // Note that we also use t() for the math challenge itself. This makes
    // it possible to 'rephrase' the challenge a bit through localization
    // or string overrides.
    $result['form']['captcha_response'] = [
      '#type' => 'textfield',
      '#title' => t('Math question'),
      '#description' => t('Solve this simple math problem and enter the result to help us reduce spam. E.g. for 1+3, enter 4.'),
      '#field_prefix' => t('@x + @y = ', ['@x' => $x, '@y' => $y]),
      '#size' => 4,
      '#maxlength' => 2,
      '#required' => TRUE,
    ];
  }
  return $result;
}


/**
 * Assembly information view
 * @param $oa_id  | ds_submissions.oa_id
 *
 * @return string
 */
function datasets_information_view($oa_id) {
  $query = db_select('ds_submissions', 'os');
  $query->fields("os");
  $query->condition("oa_id", $oa_id);
  $result = $query->execute()->fetchAll();

  // Now build the form array
  //TODO:  Let's handle this differently.  We can rename the variable, or we can pass in the chado organism id...

//  $web_apollo_organism = variable_get('web_apollo_organism');
//  $organism_data = get_webapollo_organisms($web_apollo_organism);

  $result[0]->organism = "I dont know what this should be.  String? organism_id?";

    //$result[0]->organism = $organism_data[$result[0]->organism];

  $output = '';

  if ($result[0]->dataset_type == 'Assembly') {
    $output = theme('assembly_information_view', ['data' => $result]);
  }
  elseif ($result[0]->dataset_type == 'Gene prediction') {
    $output = theme('gene_prediction_view', ['data' => $result]);
  }
  elseif ($result[0]->dataset_type == 'Mapped dataset') {
    $output = theme('mapped_dataset_view', ['data' => $result]);
  }

  return $output;
}

/**
 * @param $variables
 *
 * @return string
 */
function theme_datasets_table($variables) {
  $header = $variables['header'];
  $rows = $variables['rows'];
  $attributes = $variables['attributes'];
  $caption = $variables['caption'];
  $colgroups = $variables['colgroups'];
  $sticky = $variables['sticky'];
  $empty = $variables['empty'];

  // Add sticky headers, if applicable.
  if (count($header) && $sticky) {
    drupal_add_js('misc/tableheader.js');
    // Add 'sticky-enabled' class to the table to identify it for JS.
    // This is needed to target tables constructed by this function.
    $attributes['class'][] = 'sticky-enabled';
  }

  $output = '<table' . drupal_attributes($attributes) . ">\n";

  if (isset($caption)) {
    $output .= '<caption>' . $caption . "</caption>\n";
  }

  // Format the table columns:
  if (count($colgroups)) {
    foreach ($colgroups as $number => $colgroup) {
      $attributes = [];

      // Check if we're dealing with a simple or complex column
      if (isset($colgroup['data'])) {
        foreach ($colgroup as $key => $value) {
          if ($key == 'data') {
            $cols = $value;
          }
          else {
            $attributes[$key] = $value;
          }
        }
      }
      else {
        $cols = $colgroup;
      }

      // Build colgroup
      if (is_array($cols) && count($cols)) {
        $output .= ' <colgroup' . drupal_attributes($attributes) . '>';
        $i = 0;
        foreach ($cols as $col) {
          $output .= ' <col' . drupal_attributes($col) . ' />';
        }
        $output .= " </colgroup>\n";
      }
      else {
        $output .= ' <colgroup' . drupal_attributes($attributes) . " />\n";
      }
    }
  }

  // Add the 'empty' row message if available.
  if (!count($rows) && $empty) {
    $header_count = 0;
    foreach ($header as $header_cell) {
      if (is_array($header_cell)) {
        $header_count += isset($header_cell['colspan']) ? $header_cell['colspan'] : 1;
      }
      else {
        $header_count++;
      }
    }
    $rows[] = [
      [
        'data' => $empty,
        'colspan' => $header_count,
        'class' => ['empty', 'message'],
      ],
    ];
  }

  // Format the table header:
  if (count($header)) {
    $ts = tablesort_init($header);
    // HTML requires that the thead tag has tr tags in it followed by tbody
    // tags. Using ternary operator to check and see if we have any rows.
    $output .= (count($rows) ? ' <thead><tr>' : ' <tr>');
    foreach ($header as $cell) {
      $ts['org'] = isset($_POST['organism']) ? $_POST['organism'] : $_GET['organism'];
      $cell = ds_tablesort_header($cell, $header, $ts);

      $output .= _theme_table_cell($cell, TRUE);
    }
    // Using ternary operator to close the tags based on whether or not there are rows
    $output .= (count($rows) ? " </tr></thead>\n" : "</tr>\n");
  }
  else {
    $ts = [];
  }

  // Format the table rows:
  if (count($rows)) {
    $output .= "<tbody>\n";
    $flip = ['even' => 'odd', 'odd' => 'even'];
    $class = 'even';
    foreach ($rows as $number => $row) {
      // Check if we're dealing with a simple or complex row
      if (isset($row['data'])) {
        $cells = $row['data'];
        $no_striping = isset($row['no_striping']) ? $row['no_striping'] : FALSE;

        // Set the attributes array and exclude 'data' and 'no_striping'.
        $attributes = $row;
        unset($attributes['data']);
        unset($attributes['no_striping']);
      }
      else {
        $cells = $row;
        $attributes = [];
        $no_striping = FALSE;
      }
      if (count($cells)) {
        // Add odd/even class
        if (!$no_striping) {
          $class = $flip[$class];
          $attributes['class'][] = $class;
        }
        // Build row
        $output .= ' <tr' . drupal_attributes($attributes) . '>';
        $i = 0;
        foreach ($cells as $cell) {
          $cell = tablesort_cell($cell, $header, $ts, $i++);
          $output .= _theme_table_cell($cell);
        }
        $output .= " </tr>\n";
      }
    }
    $output .= "</tbody>\n";
  }

  $output .= "</table>\n";
  return $output;
}

/**
 *  Overriding theme for tablesort_header
 */
function ds_tablesort_header($cell, $header, $ts) {
  // Special formatting for the currently sorted column header.
  if (is_array($cell) && isset($cell['field'])) {
    $title = t('sort by @s', ['@s' => $cell['data']]);
    if ($cell['data'] == $ts['name']) {
      $ts['sort'] = (($ts['sort'] == 'asc') ? 'desc' : 'asc');
      $cell['class'][] = 'active';
      $image = theme('tablesort_indicator', ['style' => $ts['sort']]);
    }
    else {
      // If the user clicks a different header, we want to sort ascending initially.
      $ts['sort'] = 'asc';
      $image = '';
    }
    // CHANGED BELOW LINE
    $cell['data'] = l($cell['data'] . $image, $_GET['q'], [
      'attributes' => ['title' => $title],
      'query' => array_merge($ts['query'], [
        'sort' => $ts['sort'],
        'order' => $cell['data'],
        'organism' => $ts['org'],
      ]),
      'html' => TRUE,
    ]);

    unset($cell['field'], $cell['sort']);
  }
  return $cell;
}

/**
 *  Implementation of hook_theme().
 */
function datasets_theme() {
  $core_path = drupal_get_path('module', 'datasets');
  //$path = 'themes/templates/';
  return [
    'datasets_organism_approval' => [
      'template' => 'datasets_organism_approval',
      'render element' => 'form',
      'path' => $core_path . "/theme/templates",
    ],
    'assembly_information_view' => [
      'template' => 'assembly_information_view',
      'path' => $core_path . "/theme/templates",
      'variables' => ['data' => NULL],
    ],
    'gene_prediction_view' => [
      'template' => 'gene_prediction_view',
      'path' => $core_path . "/theme/templates",
      'variables' => ['data' => NULL],
    ],
    'mapped_dataset_view' => [
      'template' => 'mapped_dataset_view',
      'path' => $core_path . "/theme/templates",
      'variables' => ['data' => NULL],
    ],
    'datasets_table' => [
      'variables' => [
        'header' => NULL,
        'rows' => NULL,
        'attributes' => [],
        'caption' => NULL,
        'colgroups' => [],
        'sticky' => TRUE,
        'empty' => '',
      ],
    ],
  ];
}
